/*
SCSS variables are information about icon's compiled state, stored under its original file name

.icon-home {
  width: $icon-home-width;
}

The large array-like variables contain all information about a single icon
$icon-home: x y offset_x offset_y width height total_width total_height image_path;

At the bottom of this section, we provide information about the spritesheet itself
$spritesheet: width height image $spritesheet-sprites;
*/

$spritesheet-image: 'petals.png';

$-flower-petals1: (378px, 0px, -378px, 0px, 126px, 104px, 504px, 376px, $spritesheet-image, 'FlowerPetals1', );
$-flower-petals2: (378px, 104px, -378px, -104px, 119px, 80px, 504px, 376px, $spritesheet-image, 'FlowerPetals2', );
$-flower-petals3: (0px, 0px, 0px, 0px, 205px, 177px, 504px, 376px, $spritesheet-image, 'FlowerPetals3', );
$-flower-petals4: (0px, 177px, 0px, -177px, 115px, 119px, 504px, 376px, $spritesheet-image, 'FlowerPetals4', );
$-flower-petals5: (0px, 296px, 0px, -296px, 128px, 80px, 504px, 376px, $spritesheet-image, 'FlowerPetals5', );
$-flower-petals6: (115px, 177px, -115px, -177px, 140px, 95px, 504px, 376px, $spritesheet-image, 'FlowerPetals6', );
$-flower-petals7: (205px, 0px, -205px, 0px, 173px, 129px, 504px, 376px, $spritesheet-image, 'FlowerPetals7', );
$-flower-petals8: (378px, 184px, -378px, -184px, 63px, 99px, 504px, 376px, $spritesheet-image, 'FlowerPetals8', );
$-flower-petals9: (441px, 184px, -441px, -184px, 42px, 81px, 504px, 376px, $spritesheet-image, 'FlowerPetals9', );

$spritesheet-width: 504px;
$spritesheet-height: 376px;
$spritesheet-sprites: ($-flower-petals1, $-flower-petals2, $-flower-petals3, $-flower-petals4, $-flower-petals5, $-flower-petals6, $-flower-petals7, $-flower-petals8, $-flower-petals9, );
$spritesheet: (504px, 376px, $spritesheet-image, $spritesheet-sprites, );

/*
The provided mixins are intended to be used with the array-like variables

.icon-home {
  @include sprite-width($icon-home);
}

.icon-email {
  @include sprite($icon-email);
}
*/

@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  @include bgImgUrl($sprite-image);
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

/*
The `sprites` mixin generates identical output to the CSS template
  but can be overridden inside of SCSS

@include sprites($spritesheet-sprites);
*/

@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
